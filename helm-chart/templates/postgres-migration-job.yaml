apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.postgres.migration.name }}-{{ .Values.postgres.migration.version }}-job
  namespace: {{ .Values.namespace }}
spec:
  template:
    metadata:
      labels:
        app: {{ .Values.postgres.migration.components }}
    spec:
      initContainers:
        - name: wait-for-{{ .Values.postgres.name }}
          image: "{{ .Values.postgres.image }}:{{ .Values.postgres.version }}"
          env:
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                key: POSTGRES_HOST
                name: {{ .Values.postgres.name }}-secret
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                key: POSTGRES_USER
                name: {{ .Values.postgres.name }}-secret
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: {{ .Values.postgres.name }}-secret
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: {{ .Values.postgres.name }}-secret
          command:
          - /bin/sh
          - -c
          - |
            while ! psql -c 'select 1' > /dev/null 2>&1; do
              echo "waiting for database"
              sleep 1
            done
            echo "database is ready!"
      containers:
      - name: {{ .Values.postgres.migration.name }}
        image: "{{ .Values.postgres.image }}:{{ .Values.postgres.version }}"
        command: ["sh", "-c"]
        args:
          - |
            psql -h $(POSTGRES_HOST) -U $(POSTGRES_USER) -d $(POSTGRES_DB) -f /mnt/sql/migration-{{ .Values.postgres.migration.version }}.sql
        env:
        - name: PGPASSWORD
          value: "$(POSTGRES_PASSWORD)"
        envFrom:
            - secretRef:
                name: {{ .Values.postgres.name }}-secret
        volumeMounts:
        - name: {{ .Values.postgres.migration.name }}-volume
          mountPath: /mnt/sql
      restartPolicy: Never
      volumes:
      - name: {{ .Values.postgres.migration.name }}-volume
        configMap:
          name: {{ .Values.postgres.migration.name }}-configmap
          items:
          - key: migration-{{ .Values.postgres.migration.version }}.sql
            path: migration-{{ .Values.postgres.migration.version }}.sql 
