apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.back.name }}-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.back.components }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.back.components }}
  replicas: {{ .Values.back.replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.back.components }}
    spec:
      initContainers:
        - name: wait-for-{{ .Values.redis.name }}
          image: bash:4.4
          command: 
          - bash
          - -c
          - |
            until (echo PING | nc -w 1 {{ .Values.redis.name }}-clusterip {{ .Values.redis.servicePort }} | grep PONG);
            do 
              echo "Waiting for Redis..."
              sleep 2
            done
            echo "redis is ready!"
        - name: wait-for-{{ .Values.postgres.name }}
          image: "{{ .Values.postgres.image }}:{{ .Values.postgres.version }}"
          env:
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                key: POSTGRES_HOST
                name: {{ .Values.postgres.name }}-secret
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                key: POSTGRES_USER
                name: {{ .Values.postgres.name }}-secret
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: {{ .Values.postgres.name }}-secret
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: {{ .Values.postgres.name }}-secret
          command:
          - /bin/sh
          - -c
          - |
            while ! psql -c 'select 1' > /dev/null 2>&1; do
              echo "waiting for database"
              sleep 1
            done
            echo "database is ready!"
      containers:
      - name: {{ .Values.back.name }}
        image: "{{ .Values.back.image }}:{{ .Values.back.version }}"
        ports:
        - containerPort: {{ .Values.back.containerPort }}
        resources:
          limits: {{ .Values.back.limits | toYaml | nindent 14 }}
        envFrom:
            - secretRef:
                name: {{ .Values.postgres.name }}-secret
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.back.containerPort }}
          initialDelaySeconds: 5
          periodSeconds: 5
